/***************************************************************************
                          SoundSource.h  -  description
                             -------------------
    begin                : Fri Jan 10 2003
    copyright            : (C) 2003-2017 by Giampiero Salvi
    email                : giampi@kth.se

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.

 ***************************************************************************/

#ifndef _SOUNDSOURCE_H_
#define _SOUNDSOURCE_H_

#include <portaudio.h>

/* tools */
//#include "Feedback.h"
#include "RingBuffer.h"
#include "nrg.h"
#include "SoundProc.h"

/* Callback from SoundSource to LikelihoodGen. It's set
   calling SoundSource_SetCallback.
   NOTE: to be used only if sure that the processing will
   be executed within the time before the next call to
   waveInProc, otherwise the results are unpredictable
   (according to Microsoft).
   Alternative is to start a thread that consumes the data
   generated by SoundSource */
typedef int (SoundSourceCallbackProc)(void *cbData, const short *data, int len);

typedef struct SoundSource {
  /* portaudio related variables */
  PaStreamParameters inputParameters;
  PaStreamParameters outputParameters;
  PaStream *pa_stream;
  /* call back registered by the consumer (recognizer) */
  short     hasCallback;
  SoundSourceCallbackProc *callback;
  void     *callbackData;
  /* flags */
  int       debug;
  int       stopped;
  int       mute_flag;
  int       lms_flag; // unused, but kept for compatibility with tcl_rec
  //  LMS *lms;
  int       playback_flag;  /* playback delayed audio flag */
  //Feedback *fb;
  double    playback_delay_sec; /* feedback delay in seconds */
  nrg      *nrgX;
  nrg      *nrgY;
  int       simplex_flag;   /* turn off playback flag */
  double    simplex_threshold;
  int       samplingRate;
  int       framesPerBuffer;
  /* IO data */
  /* variables used in callback */
  //int       snd_buf_len;   /* length of a sound buffer in shorts */
  //short    *snd_buf;   /* [snd_buf_len] */
  //short    *snd_buf_mono; /* [snd_buf_len/numChannels] mono sound buffer */

  // new implementation with ring buffer 2013-10-10 (remove unnecessary fields)
  //int         ASRSamplingRate;
  RingBuffer *audiorate_buffer;
  short audio_sample_min;
  short audio_sample_max;
  //RingBuffer *asrrate_buffer;

  //Decimator *d; /* decimator structure */

  /* this is a structure to hold old values for getstreamtime */
  /* this is not used anymore: getstreamtime returns seconds (double) */
  struct _streamtime_ {
    double  old_smp;
    int     old_ms;
    double  rest_ms;
  } streamtime;

  double outtime;
  double starttime;
} SoundSource;

//void InitSoundSource();
SoundSource *SoundSource_Create();
int SoundSource_Free(SoundSource **sptr); // pointer guaranteed to be NULL
int SoundSource_Open(SoundSource *s, char *device, int smpRate);
int SoundSource_Close(SoundSource *s);
/* starts the SoundSource. The pointer is void for use
   with threads, but is used as a pointer to a LikelihoodGen
   structure. This is needed to use PushSpeech(g->speetures...)
   but is not nice: could be fixed with a callback, or setting
   a pointer in the SoundSource structure to g->speetures */
int SoundSource_Start(SoundSource *s);
int SoundSource_Stop(SoundSource *s);

/* makes SoundSource aware of the output pointer */
// int SoundSource_SetOut(SoundSource *s, Speetures *o);
/* specify what function to call (for future use) */
int SoundSource_SetCallback(SoundSource *s, SoundSourceCallbackProc *proc, void *data);

/* set the playback delay in seconds */
void SoundSource_SetFBDelay(SoundSource *s, double delay);
double SoundSource_GetFBDelay(SoundSource *s);

int SoundSource_SetSamplingRate(SoundSource *s, int audio_rate);

/* returns the time of input/output in milliseconds */
int SoundSource_GetInPos(SoundSource *s);
int SoundSource_GetOutPos(SoundSource *s);

int SoundSource_IsMuted(SoundSource *s);

void SoundSource_SetDebug(SoundSource *s, int level);

int SoundSource_SetInDevice(SoundSource *s, int idx);
int SoundSource_SetOutDevice(SoundSource *s, int idx);
int SoundSource_GetInDevice(SoundSource *s);
int SoundSource_GetOutDevice(SoundSource *s);

double SoundSource_GetStreamTime(SoundSource *s);
double SoundSource_GetOutTime(SoundSource *s);
//double SoundSource_GetBufLenMs(SoundSource *s);

#endif /* _SOUNDSOURCE_H_ */
